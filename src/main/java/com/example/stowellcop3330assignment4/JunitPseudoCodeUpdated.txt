class HelloControllerTest {

    //Task 4 Adding Items
    @Test
    void addPress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");

        Create/Sets int id = 0;
        Create/Sets String Status = "Incomplete";
        Create/Sets String Description = "Take out the trash";
        Create/Sets LocalDate Date = LocalDate.of(2020, Month.JANUARY, 8);

        Calls function from HelloController AddPress(id, Description, Date, Status);

        Create/Sets Item of type Items AddedItem = 1st item in the Observable list "list"

        Check to see that the manually added item has the same id, description, date, and status as the item added with the function AddPress
    }

    //Task 5 Deleting Items
    @Test
    void deletePress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");

        Add Item to the Observable list "list"

        Calls function from HelloController DeletePress(Item);
        Check to see that the list is empty
    }

    //Task 6 Clearing Whole List
    @Test
    void clearListPress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");
        Create Item2 of type Items = new Items(1, "Finish Your Programming :(", LocalDate.of(2023, Month.APRIL, 20), "Complete");
        Create Item3 of type Items = new Items(2, "GET LOST", LocalDate.of(2011, Month.JANUARY, 8), "Complete");

        Add all 3 items to the Observable list "list"
        Calls function from HelloController ClearListPress();
        Check to see that the list is empty
    }

    //Task 7, 8, 9 Editing Items
    @Test
    void editPress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");

        Add Item to the Observable list "list";

        Create/Sets String Status = "Complete";
        Create/Sets String Description = "Finish Your Programming :(";
        Create/Sets LocalDate Date = LocalDate.of(2023, Month.APRIL, 20);

        Calls function from HelloController SaveEditPress(Item, Description, Date, Status);

        Check to see that the Item has updated values
    }
    @Test
    void showAllPress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");
        Create Item2 of type Items = new Items(1, "Finish Your Programming :(", LocalDate.of(2023, Month.APRIL, 20), "Complete");
        Create Item3 of type Items = new Items(2, "GET LOST", LocalDate.of(2011, Month.JANUARY, 8), "Complete");

        Add all 3 items to the Observable list "list"

        Creates observable list listAll = FXCollections.observableArrayList();
        Creates observable list listALl2 = Calls function from HelloController ShowAllPress(listAll);

        for (int i = 0; i < listAll2.size(); i++) {
            if (listAll2.get(i).Status == "Complete"){
                Checks to see if status of items is complete
            }
            if (listAll2.get(i).Status == "Incomplete"){
                Checks to see if status of items is incomplete;
            }
        }
    }
    //Task 11 Showing Incomplete Items
    @Test
    void showIncompletePress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");
        Create Item2 of type Items = new Items(1, "Finish Your Programming :(", LocalDate.of(2023, Month.APRIL, 20), "Complete");
        Create Item3 of type Items = new Items(2, "GET LOST", LocalDate.of(2011, Month.JANUARY, 8), "Complete");

        Add all 3 items to the Observable list "list"

        Creates observable list listIncomplete = FXCollections.observableArrayList();
        Creates observable list listIncompleted = Calls function from HelloController ShowIncompletePress(listIncomplete);

        for (int i = 0; i < listIncompleted.size(); i++) {
            Checks to see if status of items is incomplete;
        }
    }

    //Task 12 Showing Completed Items
    @Test
    void showCompletePress() {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");
        Create Item2 of type Items = new Items(1, "Finish Your Programming :(", LocalDate.of(2023, Month.APRIL, 20), "Complete");
        Create Item3 of type Items = new Items(2, "GET LOST", LocalDate.of(2011, Month.JANUARY, 8), "Complete");

        Add all 3 items to the Observable list "list"

        Creates observable list listComplete = FXCollections.observableArrayList();
        Creates observable list listCompleted = Calls function from HelloController ShowIncompletePress(listComplete);

        for (int i = 0; i < listlistCompleted.size(); i++) {
            Checks to see if status of items is Complete;
        }
    }

    //Task 13 Saving Items
    @Test
    void savePress() throws FileNotFoundException {
        Create object of HelloController

        Create Item of type Items = new Items(0, "Take out the trash", LocalDate.of(2020, Month.JANUARY, 8), "Incomplete");

        Add Item to the Observable list "list";

        Create File of type File file = new File("src/test/java/com/example/stowellcop3330assignment4/test13.txt");
        Calls function from HelloController SavePress(file);
        Create Scanner
        Check that the line scanner is = to the Items after being converted to string for the .txt
    }

    //Task 14 Load Items
    @Test
    void loadPress() {
        Create object of HelloController

        Create File of type File file = new File("src/test/java/com/example/stowellcop3330assignment4/test14.txt");
        Calls function from HelloController LoadPress(file);

        Check that the first item  in the Observable list "list" is = to the one in test14.txt which we loaded from
    }
}